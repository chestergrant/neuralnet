import math
import sys
import random

class Edges:
    def __init__(self):
        self.edge_list = {}
        self.numEdges = 0

    def addEdge(self,node,weight):
        self.edge_list[node] = weight
        self.numEdges += 1
           

    def getEdges(self):
        return self.edge_list

    def printEdges(self):
        for x in self.edge_list:
            print x
            print self.edge_list[x]

class Node:    
    def __init__(self):
        self.edges = Edges()
        self.outputLoc = 0

    def setOutputLoc(self, loc):
        self.outputLoc = loc

    def getOutputLoc(self,loc):
        return self.outputLoc

    def writeToMemory(self, memory, value):
        memory[self.outputLoc] = value
        return memory

    #Node - Input Node's Location in memory
    #Edge - location in memory    
    def addEdge(self, node, weight):
        self.edges.addEdge(node,weight)

    def sigmoidFunc(self, x):
        return (math.exp(x))/(math.exp(x) + 1)

    def printNode(self):
        edge_list = self.edges.getEdges()
        print edge_list
        print "\nOutput Loccation : "+str(self.outputLoc)
        print "--------------------------------------------\n"
            
    def calculateSum(self, memory):
        edge_list = self.edges.getEdges()
        sum = 0.0
        for x in edge_list:
            sum += memory[x] * memory[edge_list[x]]
            #print "\n memory input : "+str(x)+"\n memory weight : "+str(edge_list[x])
            #print "\ninput : "+str(memory[x]) +" weight : "+str(memory[edge_list[x]])
        return sum
            
            
    def computeOutput(self, memory):
        sum = self.calculateSum(memory)
        print "\nThe computed weight:"+ str(sum)
        return self.sigmoidFunc(sum)

class Layer:

    def __init__(self,the_offset):
        self.offset = the_offset
        self.numNodes = 0
        self.nodes = []

    def addNode(self, aNode):
        aNode.setOutputLoc(self.offset + self.numNodes)
        self.nodes.append(aNode)
        #aNode.printNode()
        self.numNodes += 1
    def getNodes():
        return self.nodes

    def computeLayer(self, memory):
       
        for aNode in self.nodes:
            #aNode.printNode()
            #print "------------------------------"
            output = aNode.computeOutput(memory)
            memory = aNode.writeToMemory(memory, output)
        return memory

class NeuralNet:

    def __init__(self):
        self.layers = []
        self.numLayers = 0
    
    def addLayer(self, aLayer):
        self.layers.append(aLayer)
        self.numLayers += 1

    def setInput(self,inputLayer,memory):
        count = 0        
        for data  in inputLayer:
            memory[count] = data
            count += 1
        return memory

    def update(self,memory):
        for aLayer in self.layers:
            memory = aLayer.computeLayer(memory)
        return memory

    def getOutputVector(self,memory,numOutput,offset):
        output = []     
        for i in range(numOutput):
            output.append(memory[offset+i])
        return output
class Pos:
    def __init__(self,begin_x,begin_y):
        self.x = begin_x
        self.y = begin_y
class Agent:
#An agent is supposed to have several neural net.
#An area for memory
#A location in memory
#A physical location in the environment
#The action action is going to be a weight sum of its neural nets
#A Function to evolve the net an send out the evolved version

#Structure of the neural net? How do I set it
#How do I modify it once it has been set
    def __init__(self, numCloneNets, cloneStructure, mainStructure):
        self.layer_count = {} #Store for each layer the num of nodes cross all network
                             #in that layer number
        self.edge_count = {}

        self.clones = []
        self.memory ={}
        self.mainNet,self.memory = self.generateNetFromStructure(mainStructure, self.memory)
        
        self.rewards = 0.0
        self.physical_location = Pos()
        self.memory_location = Pos()
    
        for i in range(numCloneNets):
            aClone,self.memory = self.generateNetFromStructure(cloneStructure, self.memory)
            self.clones.append(aClone)
    
    def generateNetFromStructure(self, structure, memory):
        #A structure for a neural net:
        #[numInput, numLayers,(x11,x12,x13..x1n),(x21,x22,x23,..x2n),...(xn1,xn2,xn3...xnn)]
        #where x11 represents the number of connections from the previous layer to hidden layer 1 to node 1
        #where x34 represents the number of connections previous layer to hidden layer 3 to node 4 in that layer etc.
        numInput = structure[0]
        numLayers = structure[1]
        numPrevLayerNodes = numInput
        output = NeuralNet()
        self.layer_count[0] = numInput

        #Create the weights and nodes         
        for i in range(numLayers):
            idx = i + 2
            layer_structure = structure[idx]

            if not self.layer_count.has_key(i+1) :
                self.layer_count[i+1] = 0
            if not self.edge_count.has_key(i+1):
                self.edge_count[i+1] = 0

            #Layers are given a hundred thousand space to fit in
            #might might need to modify it to account for more neural net
            #0 - 99999 Input Node
            #100000 - 199999 Output of Layer 1 Node for all neural net
            #200000 - 299,999 Output of Layer 2 Node
            #300000 - 399,999 Output of Layer 3 Node etc.

            #1,100,000 - 1,199,999 Edge memory connecting input and layer 1
            #1,200,000 - 1,299,999 Edge memory connecting layer 1 and layer 2 etc.
            
            #edge_count stores the number of edges in each layer
            edge_base = 1000000 + self.edge_count[i+1]+(i+1)*100000

            base = self.layer_count[i+1]
            aLayer = Layer(base)

            for x in layer_structure:        
                
                for n in range(x):
                    aNode = Node()
                    for edge in range(n):
                        edge_idx = edge_base + edge
                        memory[edge_idx] = random.uniform(-1,1)
                        self.edge_count[i+1] += 1      #maybe this should be edgecount idk                  
                         
                               
                        if i == 0:
                            lower_bound = 0
                            upper_bound = lower_bound + numInput
                        else:
                            lower_bound = self.layer_count[i] + i*100000 - numPrevLayerNodes
                            upperbound = self.layer_count[i] + i*100000
                        randNode = random.randInt(lower_bound,upper_bound) #The Output of a node need not be as memory layer.  I need to modify this
                        aNode.addEdge(randNode,edge_idx)

                    aLayer.addNode(aNode)
                    self.layer_count[i+1] += 1 #increase the number of nodes in layer
                numPrevLayerNodes = len(x)
                output.addLayer(aLayer)
        return output, memory
        
                

    def getMemoryView(self,memory):
        #get the memory that can be viewed given the current location in memory
    
    def getPhysicalView(self,environment):
        #get a view of our environment
    
    def generateInputVector(self,environment):
        output = []
        output.append(self.physical_location.x)
        output.append(self.physical_location.y)
        output.append(self.memory_location.x)
        output.append(self.memory_location.y)
        output.append(self.rewards)
        mem_view = self.getMemoryView(self.memory)
        for item in mem_view:
            output.append(item)
        physical_view = self.getPhysicalView(environment)
        for item in physical_view:
            output.append(item)
        return output
   
    def setClones(self, new_clones):
        self.clones = new_clones

    def setMainNet(self, new_main):
        self.mainNet = new_main
    
    def getClones(self):
        return self.clones

    def getMainNet(self):
        return self.mainNet

    def updateRewards(self, val):
        self.rewards += val

    def getNeuralAction(self,input,memory,outputOffSet,numOfOutput):
        sum_output = []

        #initialize output
        for i in range(numOfOutput):
            sum_output.append(0)

        #Gets the output from each neural net and adds them up for each 
        #output component
        for aClone in self.clones:
            memory = aClone.setInput(input,memory)
            memory = aClone.update(memory)
            outputVal = aClone.getOutputVector(memory,numOfOutput,outputOffSet)
            for i in range(numOfOutput):
                sum_output[i] += outputVal[i]
        
        #Calculate the output for the main NeuralNet
        memory = self.mainNet.setInput(input,memory)
        memory = self.mainNet.update(memory)
        outputVal = self.mainNet.getOutputVector(memory,numOfOutput,outputOffSet)
        outputAction = 0
    
        #Sums the clone and main neural net and find the output with the 
        #highest output value
        for i in range(numOfOutput):
            sum_output[i] /= numOfOutput
            sum_output[i] = 0.5*sum_output[i] + 0.5*outputVal[i]
            if sum_output[i] > sum_output[outputAction]:
                outputAction = i
        return outputAction, memory

            
        
    def evovleNet(self):
        #doSomething


    
    
            
   
          

    
            
        
memory = {}

#inputs from 0-999 memory location is for input
memory[0] = 1.0
memory[1] = 0.0
memory[2] = 0.0
memory[3] = 1.0

#1000 - 1999 memory location for weights
memory[1000] = 0.5
memory[1001] = 1.0
memory[1002] = 0.0
memory[1003] = 1.0
memory[1004] = 0.5
memory[1005] = 0.0
memory[1006] = 0.0
memory[1007] = 1.0
memory[1008] = 0.5
memory[1009] = 1.0
memory[1010] = 1.0
memory[1011] = 0.5
memory[1012] = 0.0
memory[1013] = 1.0
memory[1014] = 0.0
memory[1015] = 1.0
memory[1016] = 0.5
memory[1017] = 1.0
memory[1018] = 0.0
memory[1019] = 0.5

  
#2000 - 2999 memory location for Layer 1 output
memory[2000] = 0.0
memory[2001] = 0.0
memory[2002] = 0.0

#3000 - 3999 memory location for Layer 2 output
memory[3000] = 0.0 
memory[3001] = 0.0
memory[3002] = 0.0

outputLayer =  Layer(3000)
hiddenLayer = Layer(2000)

aNode0 = Node()
aNode0.addEdge(0,1000) #addEdge(InputNodeMemoryAddress, WeightMemoryAddress)
aNode0.addEdge(1,1001)
aNode0.addEdge(2,1002)
aNode0.addEdge(3,1003)

aNode1 = Node()
aNode1.addEdge(0,1004) #addEdge(InputNodeMemoryAddress, WeightMemoryAddress)
aNode1.addEdge(1,1005)
aNode1.addEdge(2,1006)
aNode1.addEdge(3,1007)

aNode2 = Node()
aNode2.addEdge(0,1008) #addEdge(InputNodeMemoryAddress, WeightMemoryAddress)
aNode2.addEdge(1,1009)
aNode2.addEdge(2,1010)
aNode2.addEdge(3,1011)

aNode3 = Node()
aNode3.addEdge(2000,1012) #addEdge(InputNodeMemoryAddress, WeightMemoryAddress)
aNode3.addEdge(2001,1013)
aNode3.addEdge(2002,1014)

aNode4 = Node()
aNode4.addEdge(2000,1015) #addEdge(InputNodeMemoryAddress, WeightMemoryAddress)
aNode4.addEdge(2001,1016)
aNode4.addEdge(2002,1017)

hiddenLayer.addNode(aNode0)
hiddenLayer.addNode(aNode1)
hiddenLayer.addNode(aNode2)

outputLayer.addNode(aNode3)
outputLayer.addNode(aNode4)

net = NeuralNet()
net.addLayer(hiddenLayer)
net.addLayer(outputLayer)
memory = net.setInput([1,0,0,1],memory)
memory = net.update(memory)
outputVal = net.getOutputVector(memory,2,3000)



print "Output 1: "+str(outputVal[0])
print "\nOutput 2: "+str(outputVal[1])
