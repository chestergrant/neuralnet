import math
import sys
import random

class Edges:
    edge_list = {}
    
    def addEdge(self,node,weight):
        self.edge_list[node] = weight

    def getEdges(self):
        return self.edge_list

    def printEdges(self):
        for x in self.edge_list:
            print x
            print self.edge_list[x]

class Node:
    edges = Edges()
    outputLoc = 0
    
    def setOutputLoc(self, loc):
        self.outputLoc = loc

    def getOutputLoc(self,loc):
        return self.outputLoc

    def writeToMemory(self, memory, value):
        memory[self.outputLoc] = value
        return memory
    
    def addEdge(self, node, weight):
        self.edges.addEdge(node,weight)

    def sigmoidFunc(self, x):
        return (math.exp(x))/(math.exp(x) + 1)

    def calculateSum(self, memory):
        edge_list = self.edges.getEdges()
        sum = 0.0
        for x in edge_list:
            sum += memory[x] * memory[edge_list[x]]
        return sum
            
            
    def computeOutput(self, memory):
        sum = self.calculateSum(memory)
        print "The computed weight:"+ str(sum)
        return self.sigmoidFunc(sum)

class Layer:
    nodes = []
    offset = 0
    numNodes = 0

    def __init__(self,the_offset):
        self.offset = the_offset

    def addNode(self, aNode):
        aNode.setOutputLoc(self.offset + numNodes)
        self.nodes.append(aNode)
        self.numNodes += 1

    def computeLayer(self, memory):
        for aNode in nodes:
            output = x.computeOutput(memory)
            memory = x.writeToMemory(memory, output)
        return memory
    
            
        
memory = {}

#inputs from 0-999 memory location is for input
memory[0] = 1.0
memory[1] = 0.0
memory[2] = 0.0
memory[3] = 1.0

#1000 - 1999 memory location for weights
memory[1000] = 0.5
memory[1001] = 1.0
memory[1002] = 0.0
memory[1003] = 1.0
memory[1004] = 0.5
memory[1005] = 0.0
memory[1006] = 0.0
memory[1007] = 1.0
memory[1008] = 0.5
memory[1009] = 1.0
memory[1010] = 1.0
memory[1011] = 0.5
memory[1012] = 0.0
memory[1013] = 0.0
memory[1014] = 0.0
memory[1015] = 1.0
memory[1016] = 0.5
memory[1017] = 1.0
memory[1018] = 0.0
memory[1019] = 0.5

  
#2000 - 2999 memory location for Layer 1 output
memory[2000] = 0.0
memory[2001] = 0.0
memory[2002] = 0.0

#3000 - 3999 memory location for Layer 2 output
memory[3000] = 0.0 
memory[3001] = 0.0
memory[3002] = 0.0

outputLayer =  Layer(3000)
hiddenLayer = Layer(2000)

aNode0 = Node()
aNode0.addEdge(0,1000) #addEdge(InputNodeMemoryAddress, WeightMemoryAddress)
aNode0.addEdge(1,1001)
aNode0.addEdge(2,1002)
aNode0.addEdge(3,1003)

aNode1 = Node()
aNode1.addEdge(0,1004) #addEdge(InputNodeMemoryAddress, WeightMemoryAddress)
aNode1.addEdge(1,1005)
aNode1.addEdge(2,1006)
aNode1.addEdge(3,1007)

aNode2 = Node()
aNode2.addEdge(0,1008) #addEdge(InputNodeMemoryAddress, WeightMemoryAddress)
aNode2.addEdge(1,1009)
aNode2.addEdge(2,1010)
aNode2.addEdge(3,1011)

aNode3 = Node()
aNode3.addEdge(2000,1012) #addEdge(InputNodeMemoryAddress, WeightMemoryAddress)
aNode3.addEdge(2001,1013)
aNode3.addEdge(2002,1014)

aNode4 = Node()
aNode4.addEdge(2000,1015) #addEdge(InputNodeMemoryAddress, WeightMemoryAddress)
aNode4.addEdge(2001,1016)
aNode4.addEdge(2002,1017)

hiddenLayer.addNode(aNode0)
hiddenLayer.addNode(aNode1)
hiddenLayer.addNode(aNode2)

outputLayer.addNode(aNode3)
outputLayer.addNode(aNode4)

memory = hiddenLayer.computeLayer(memory)
memory = outputLayer.computerLayer(memory)

val1 = memory[3000]
val2 = memory[3002] 

print "Output 1: "+str(val1)
print "\nOutput 2: "+str(val2)
